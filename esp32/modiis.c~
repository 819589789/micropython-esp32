#if 0
#include <stdio.h>
#include <stdint.h>
#include <string.h>

#include "py/runtime.h"
#include "py/obj.h"
#include "py/stream.h"
#include "py/objstr.h"
#include "modmachine.h"
#include "mphalport.h"

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "freertos/event_groups.h"
#include "rom/lldesc.h"
#include "soc/soc.h"
#include "soc/gpio_sig_map.h"
#include "soc/i2s_reg.h"
#include "driver/i2c.h"
#include "driver/i2s.h"
#include <sys/unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include "lwip/sys.h"
#include "lwip/netdb.h"
#include "lwip/api.h"
#include "sys/socket.h"

#include "esp_intr_alloc.h"
#include "esp_log.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event_loop.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "iistest/camera.h"
#include "esp_vfs_fat.h"
#include "driver/sdmmc_host.h"
#include "driver/sdmmc_defs.h"
#include "sdmmc_cmd.h"
#include <fcntl.h>
#include "extmod/vfs.h"
#include "extmod/vfs_fat.h"
#include "unix/fdfile.h"
#include "py/test_thread.h"
#include "math.h"

#define I2S_MCLK                    22
#define WRITE_BIT                   I2C_MASTER_WRITE
#define READ_BIT                    I2C_MASTER_READ
#define ESP_SLAVE_ADDR              (0X34) 
#define ACK_CHECK_EN                0x1
#define ACK_CHECK_DIS               0x0
#define I2C_MASTER_NUM              I2C_NUM_1
#define I2C_MASTER_SCL_IO           GPIO_NUM_27
#define I2C_MASTER_SDA_IO           GPIO_NUM_26
#define I2C_MASTER_TX_BUF_DISABLE   0
#define I2C_MASTER_RX_BUF_DISABLE   0
#define I2C_MASTER_FREQ_HZ          600

#define PLAY       1
#define BEGIN      1
#define PAUSE      2
#define STOP       3
#define SET        4

#define QQVGA     4
#define QQVGA2    5
#define QICF      6
#define HQVGA     7
#define QVGA      8
#define VGA       10
#define RGB555    0
#define GRAYSCALE 2

char     filename[30];
char     pictureFilename[30];
char     outputFilename[30];
uint8_t  mark=STOP;
uint8_t  rmark=STOP;
uint8_t  Volume1=0;
uint8_t  Volume2=0;
uint8_t  loop=0;
uint8_t  Size=8;
uint8_t  Pixel=0;
uint8_t  set=0;
float    time1=0.00;

typedef struct _miis_obj_t {
    mp_obj_base_t base;
	int mode;
} miis_obj_t;

typedef struct WAV_HEADER
{
    char                  riffType[4];
    unsigned int          riffSize;
    char                  waveType[4];
    char                  formatType[4];
    unsigned int          formatSize;
    uint16_t              compressionCode;
    i2s_channel_t         numChannels;
    uint32_t              sampleRate;
    unsigned int          bytesPerSecond;
    unsigned short        blockAlign;
    i2s_bits_per_sample_t bitsPerSample;
    char                  dataType1[1];
    char                  dataType2[3];
    unsigned int          dataSize;
    char                  test[800];
}WAV_HEADER;

struct WAV
{
    WAV_HEADER header;
    FILE *fp;
};

typedef struct WAV *HANDLE_WAV;

static void I2C_WriteNAU8822(int8_t addr, int16_t data)
{
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte( cmd ,(ESP_SLAVE_ADDR) | WRITE_BIT           ,ACK_CHECK_EN);
    i2c_master_write_byte( cmd ,((addr<<1) |(data>>8))| WRITE_BIT      ,ACK_CHECK_EN);
    i2c_master_write_byte( cmd ,((int8_t) (data & 0x00ff) )| WRITE_BIT ,ACK_CHECK_EN);
    i2c_master_stop(cmd);
    i2c_master_cmd_begin(I2C_MASTER_NUM, cmd, 100);
    i2c_cmd_link_delete(cmd);
}
static void I2C_Master_Init()
{

    i2c_port_t i2c_master_port = I2C_MASTER_NUM;
    i2c_config_t conf={
		.mode             = I2C_MODE_MASTER,
    	.sda_io_num       = I2C_MASTER_SDA_IO,
    	.sda_pullup_en    = GPIO_PULLUP_ENABLE,
    	.scl_io_num       = I2C_MASTER_SCL_IO,
    	.scl_pullup_en    = GPIO_PULLUP_ENABLE,
    	.master.clk_speed = I2C_MASTER_FREQ_HZ ,
	};
    i2c_param_config(i2c_master_port, &conf);
    i2c_driver_install(i2c_master_port, conf.mode,I2C_MASTER_RX_BUF_DISABLE,I2C_MASTER_TX_BUF_DISABLE, 0);
}



void I2S_MCLK_Init(unsigned int SAMPLE_RATE)
{
    periph_module_enable(PERIPH_LEDC_MODULE);
    ledc_timer_bit_t bit_num = (ledc_timer_bit_t) 2;
    int duty                 = pow(2, (int) bit_num) / 2;
    ledc_timer_config_t timer_conf;
    timer_conf.bit_num       = bit_num;
    timer_conf.freq_hz       = SAMPLE_RATE*256; 
    timer_conf.speed_mode    = LEDC_HIGH_SPEED_MODE;
    timer_conf.timer_num     = LEDC_TIMER_0;
    ledc_timer_config(&timer_conf);
    ledc_channel_config_t ch_conf;
    ch_conf.channel          = LEDC_CHANNEL_1;
    ch_conf.timer_sel        = LEDC_TIMER_0;
    ch_conf.intr_type        = LEDC_INTR_DISABLE; 
    ch_conf.duty             = duty;
    ch_conf.speed_mode       = LEDC_HIGH_SPEED_MODE;
    ch_conf.gpio_num         = I2S_MCLK ;  
    ledc_channel_config(&ch_conf);
    ledc_set_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_1, duty);
    ledc_update_duty(LEDC_HIGH_SPEED_MODE, LEDC_CHANNEL_1); 

}
void I2S_Master_Init(uint32_t SAMPLE_RATE,i2s_bits_per_sample_t BITS_PER_SAMPLE)
{
    i2s_config_t i2s_config  = {
        .mode                = I2S_MODE_MASTER | I2S_MODE_TX,
        .sample_rate         = SAMPLE_RATE,
        .bits_per_sample     = BITS_PER_SAMPLE,
        .channel_format      = I2S_CHANNEL_FMT_RIGHT_LEFT,
        .communication_format= I2S_COMM_FORMAT_I2S,
        .intr_alloc_flags    = ESP_INTR_FLAG_SHARED
    };
    i2s_config.dma_buf_count = 5;
    i2s_config.dma_buf_len   = 100;
    i2s_pin_config_t pin_config = {
        .bck_io_num   = 5,
        .ws_io_num    = 17,
        .data_out_num = 0,
        .data_in_num  = 39
    };
    i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
    i2s_set_pin(I2S_NUM_0, &pin_config);
}

void I2C_Setup_NAU8822_play()
{
    I2C_Master_Init();
    I2C_WriteNAU8822(0,  0x000);
    vTaskDelay(10);
    I2C_WriteNAU8822(1,  0x1FF);
    I2C_WriteNAU8822(2,  0x1BF);
    I2C_WriteNAU8822(3,  0x1FF);
    I2C_WriteNAU8822(4,  0x010);
    I2C_WriteNAU8822(5,  0x000);
    I2C_WriteNAU8822(6,  0x00C);
    I2C_WriteNAU8822(7,  0x000);
    I2C_WriteNAU8822(10, 0x008);
    I2C_WriteNAU8822(14, 0x108);
    I2C_WriteNAU8822(15, 0x0FF);
    I2C_WriteNAU8822(16, 0x1FF);
    I2C_WriteNAU8822(45, 0x0bf);
    I2C_WriteNAU8822(46, 0x1bf);
    I2C_WriteNAU8822(47, 0x175);
    I2C_WriteNAU8822(48, 0x175);
    I2C_WriteNAU8822(50, 0x001);
    I2C_WriteNAU8822(51, 0x001);
    if(Volume2 != 0){
        I2C_WriteNAU8822(52, Volume2);
        I2C_WriteNAU8822(53, Volume2+256);
    }else{
        I2C_WriteNAU8822(52, 0x040);
        I2C_WriteNAU8822(53, 0x040);
    }
    if(Volume1 != 0){
        I2C_WriteNAU8822(54, Volume1);
        I2C_WriteNAU8822(55, Volume1+256);
    }else{
        I2C_WriteNAU8822(54, 0x040);
        I2C_WriteNAU8822(55, 0x040);
    }
    i2c_driver_delete(I2C_MASTER_NUM);
}
  
void playWAV(void *arg)
{
    while(1){
        while(mark==STOP){
            vTaskDelay(100);
        }
        I2C_Setup_NAU8822_play();
        HANDLE_WAV wav = (HANDLE_WAV)calloc(1, sizeof(struct WAV));
        if(wav == NULL){
            printf("playWAV(): Unable to allocate WAV struct.\n");
            return;
        }
        vTaskDelay(100);
        wav->fp = fopen(filename, "rb");
        if(wav->fp == NULL){
            printf("playWAV(): Unable to open wav file. %s\n", filename);
            return;
        }
        if(fread(&(wav->header.riffType), 1, 4, wav->fp) != 4){
            printf("playWAV(): couldn't read RIFF_ID\n");
            return;  /* bad error "couldn't read RIFF_ID" */
        }
        if(strncmp("RIFF", wav->header.riffType, 4)){
            printf("playWAV(): RIFF descriptor not found.\n") ;
            return;
        }
        fread(&(wav->header.riffSize), 4, 1, wav->fp);
        if(fread(&wav->header.waveType, 1, 4, wav->fp) !=4){
            printf("playWAV(): couldn't read format\n");
            return;  /* bad error "couldn't read format" */
        }
        if(strncmp("WAVE", wav->header.waveType, 4)){
            printf("playWAV(): WAVE chunk ID not found.\n") ;
            return;
        }
        if(fread(&(wav->header.formatType), 1, 4, wav->fp) != 4){
            printf("playWAV(): couldn't read format_ID\n");
            return;  /* bad error "couldn't read format_ID" */
        }
        if(strncmp("fmt", wav->header.formatType, 3)){
            printf("playWAV(): fmt chunk format not found.\n") ;
            return;
        }
        fread(&(wav->header.formatSize), 4, 1, wav->fp);
        fread(&(wav->header.compressionCode), 2, 1, wav->fp);
        fread(&(wav->header.numChannels), 2, 1, wav->fp);
        fread(&(wav->header.sampleRate), 4, 1, wav->fp);
        fread(&(wav->header.bytesPerSecond), 4, 1, wav->fp);
        fread(&(wav->header.blockAlign), 2, 1, wav->fp);
        fread(&(wav->header.bitsPerSample), 2, 1, wav->fp);
        while(1){
            if(fread(&wav->header.dataType1, 1, 1, wav->fp) != 1){
                printf("playWAV(): Unable to read data chunk ID.\n");
                free(wav);
                break;
            }
            if(strncmp("d", wav->header.dataType1, 1) == 0){
                fread(&wav->header.dataType2, 3, 1, wav->fp);
                if(strncmp("ata", wav->header.dataType2, 3) == 0){
                    fread(&(wav->header.dataSize),4,1,wav->fp);
                    break;
                }
            }
        }
        I2S_MCLK_Init(wav->header.sampleRate);
        I2S_Master_Init(wav->header.sampleRate ,wav->header.bitsPerSample);
        i2s_set_sample_rates(I2S_NUM_0, wav->header.sampleRate);
        int i=floor(time1);
        float j;
        j = time1-i;
        j *= 100;
        i = i*60+j;
        fseek(wav->fp,wav->header.sampleRate * wav->header.bitsPerSample * wav->header.numChannels * i/8,1);
        while(fread(&wav->header.test, 1 , 800 , wav->fp)){
            char *buf=(char *)&wav->header.test;
            int bytes_left=800,bytes_written = 0;
            while(bytes_left > 0){
                bytes_written = i2s_write_bytes(I2S_NUM_0 , buf , bytes_left , 0);
                bytes_left   -= bytes_written;
                buf          += bytes_written;
                if(mark==PAUSE){
                    I2C_Master_Init();
                    I2C_WriteNAU8822(52, 0x040);
                    I2C_WriteNAU8822(53, 0x040);
                    I2C_WriteNAU8822(54, 0x040);
                    I2C_WriteNAU8822(55, 0x040);
                    i2c_driver_delete(I2C_MASTER_NUM);
                    vTaskDelay(500);
                    while(mark==PAUSE){
                        vTaskDelay(100);
                    }
                    vTaskDelay(100);
                    I2C_Master_Init();
                    I2C_WriteNAU8822(52, Volume2);
                    I2C_WriteNAU8822(53, Volume2+256);
                    I2C_WriteNAU8822(54, Volume1);
                    I2C_WriteNAU8822(55, Volume1+256);
                    i2c_driver_delete(I2C_MASTER_NUM);
                }
                while(mark==SET){
                    vTaskDelay(10);
                }
            }
            if(mark==STOP){
                I2C_Master_Init();
                I2C_WriteNAU8822(52, 0x040);
                I2C_WriteNAU8822(53, 0x040);
                I2C_WriteNAU8822(54, 0x040);
                I2C_WriteNAU8822(55, 0x040);
                i2c_driver_delete(I2C_MASTER_NUM);
                break;
            }
        }
        i2s_stop(I2S_NUM_0);
        int err =i2s_driver_uninstall(I2S_NUM_0);
        fclose(wav->fp);
        free(wav);
        if(loop){
             loop--;  
        }else{
        mark=STOP;
        } 
        vTaskDelay(1000);
    }
}



STATIC mp_obj_t iis_play_init(void){
    sdmmc_host_t host = SDMMC_HOST_DEFAULT();
    sdmmc_slot_config_t slot_config = SDMMC_SLOT_CONFIG_DEFAULT();
    esp_vfs_fat_sdmmc_mount_config_t mount_config = {
        .format_if_mount_failed = false,
        .max_files = 5
    };
    sdmmc_card_t* card;
    esp_err_t ret = esp_vfs_fat_sdmmc_mount("/sdcard", &host, &slot_config, &mount_config, &card);
    if (ret != ESP_OK) {
        if (ret == ESP_FAIL) {
            printf("Failed to mount filesystem. If you want the card to be formatted, set format_if_mount_failed = true.");
        } else {
            printf("Failed to initialize the card (%d). Make sure SD card lines have pull-up resistors in place.", ret);
        }
        return mp_const_false;
    }
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(iis_play_init_obj, iis_play_init);

STATIC mp_obj_t iis_play_load(mp_obj_t name){
    char *buf = (char *)mp_obj_str_get_str(name);
    char SDfilename[30]="/sdcard";
    strcat(SDfilename,buf);
    strcpy(filename,SDfilename);	
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_load_obj, iis_play_load);

STATIC mp_obj_t iis_play_play(size_t n_args, const mp_obj_t *args){
	if(n_args == 2){
		printf("loops=%d\n",mp_obj_get_int(args[0]));
		printf("start=%f\n",mp_obj_get_float(args[1]));
	}
   mark=BEGIN;
   time1=mp_obj_get_float(args[1]);
   loop=mp_obj_get_int(args[0]);
   xTaskCreate(playWAV, "playWAV",4096, NULL, 5, NULL);
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(iis_play_play_obj, 0, 2, iis_play_play);

STATIC mp_obj_t iis_play_stop(void){
    mark=STOP;
	printf("iis_play_stop\n");
	return mp_const_true;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(iis_play_stop_obj, iis_play_stop);

STATIC mp_obj_t iis_play_pause(void){
    mark=PAUSE;
	printf("iis_play_pause\n");
	return mp_const_true;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(iis_play_pause_obj, iis_play_pause);

STATIC mp_obj_t iis_play_unpause(void){
    mark=BEGIN;
	printf("iis_play_unpause\n");
	return mp_const_true;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(iis_play_unpause_obj, iis_play_unpause);

STATIC mp_obj_t iis_play_fadeout(mp_obj_t time){
	printf("time=%d\n",mp_obj_get_int(time));
	return mp_const_true;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_fadeout_obj, iis_play_fadeout);

STATIC mp_obj_t iis_play_set_volume(mp_obj_t volume){
 mark=SET;
    if(mp_obj_get_int(volume)>99){
        Volume2=99;
    }
    if(mp_obj_get_int(volume)<1){
        Volume2=0;
    }
    Volume2=((mp_obj_get_int(volume))*64/100);
    I2C_Master_Init();
    I2C_WriteNAU8822(52, Volume2);
    I2C_WriteNAU8822(53, Volume2+256);
    i2c_driver_delete(I2C_MASTER_NUM);
    mark=PLAY;

	printf("value=%d\n",mp_obj_get_int(volume));
	return mp_const_true;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_set_volume_obj, iis_play_set_volume);

STATIC mp_obj_t iis_play_get_volume(void){
	printf("Headphones volume = %d \n",Volume2);
    printf("Speakers volume = %d \n",Volume1);
	return mp_const_true;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(iis_play_get_volume_obj, iis_play_get_volume);

STATIC mp_obj_t iis_play_get_busy(){
	if(mark==PLAY)
        return mp_const_true;
    else
        return mp_const_false;   
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(iis_play_get_busy_obj, iis_play_get_busy);

STATIC mp_obj_t iis_play_set_endcallback(){
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(iis_play_set_endcallback_obj, iis_play_set_endcallback);

STATIC mp_obj_t iis_play_queue(mp_obj_t name){
	printf("name = %s\n",mp_obj_str_get_str(name));
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_queue_obj, iis_play_queue);

STATIC mp_obj_t iis_play_set_nchannels(mp_obj_t channels){
	printf("channels=%d\n",mp_obj_get_int(channels));
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_set_nchannels_obj, iis_play_set_nchannels);

STATIC mp_obj_t iis_play_set_sampwidth(mp_obj_t sampwidth){
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_set_sampwidth_obj, iis_play_set_sampwidth);

STATIC mp_obj_t iis_play_set_framerate(mp_obj_t framerate){
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_set_framerate_obj, iis_play_set_framerate);

STATIC mp_obj_t iis_play_set_record(size_t n_args, const mp_obj_t *args){
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(iis_play_set_record_obj, 1, 2,  iis_play_set_record);

STATIC mp_obj_t iis_play_set_stop(){
	return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_1(iis_play_set_stop_obj, iis_play_set_stop);


STATIC mp_obj_t iis_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw,
        const mp_obj_t *args) {
	gpio_num_t pin_id = machine_pin_get_id(args[0]);
	miis_obj_t* self = m_new_obj(miis_obj_t);
	self->base.type = type;
	self->mode = 1;
	return MP_OBJ_FROM_PTR(self);
}



STATIC const mp_rom_map_elem_t iis_locals_dict_table[] = {
	{ MP_ROM_QSTR(MP_QSTR_init), 			MP_ROM_PTR(&iis_play_init_obj) },
	{ MP_ROM_QSTR(MP_QSTR_load), 			MP_ROM_PTR(&iis_play_load_obj) },
	{ MP_ROM_QSTR(MP_QSTR_play),      		MP_ROM_PTR(&iis_play_play_obj) },
	{ MP_ROM_QSTR(MP_QSTR_stop),      		MP_ROM_PTR(&iis_play_stop_obj) },
	{ MP_ROM_QSTR(MP_QSTR_pause),      		MP_ROM_PTR(&iis_play_pause_obj) },
	{ MP_ROM_QSTR(MP_QSTR_unpause),      	MP_ROM_PTR(&iis_play_unpause_obj) },
	{ MP_ROM_QSTR(MP_QSTR_fadeout),      	MP_ROM_PTR(&iis_play_fadeout_obj) },
	{ MP_ROM_QSTR(MP_QSTR_set_volume),      MP_ROM_PTR(&iis_play_set_volume_obj) },
	{ MP_ROM_QSTR(MP_QSTR_get_volume),      MP_ROM_PTR(&iis_play_get_volume_obj) },
	{ MP_ROM_QSTR(MP_QSTR_get_busy),      	MP_ROM_PTR(&iis_play_get_busy_obj) },
	{ MP_ROM_QSTR(MP_QSTR_set_endcallback), MP_ROM_PTR(&iis_play_set_endcallback_obj) },
	{ MP_ROM_QSTR(MP_QSTR_queue),     		MP_ROM_PTR(&iis_play_queue_obj) },
	{ MP_ROM_QSTR(MP_QSTR_set_nchannels),   MP_ROM_PTR(&iis_play_set_nchannels_obj) },
	{ MP_ROM_QSTR(MP_QSTR_set_sampwidth),   MP_ROM_PTR(&iis_play_set_sampwidth_obj) },
	{ MP_ROM_QSTR(MP_QSTR_set_framerate),   MP_ROM_PTR(&iis_play_set_framerate_obj) },
	{ MP_ROM_QSTR(MP_QSTR_set_record),      MP_ROM_PTR(&iis_play_set_record_obj) },
	{ MP_ROM_QSTR(MP_QSTR_set_stop),      	MP_ROM_PTR(&iis_play_set_stop_obj) },
};
STATIC MP_DEFINE_CONST_DICT(iis_locals_dict,iis_locals_dict_table);

const mp_obj_type_t mp_iis_type = {
	{ &mp_type_type },
	.name = MP_QSTR_sdcard,
	.make_new = iis_make_new,
	.locals_dict = (mp_obj_t)&iis_locals_dict,
};

STATIC const mp_rom_map_elem_t iis_module_globals_table[] = {
	{ MP_ROM_QSTR(MP_QSTR_iis),MP_ROM_PTR(&mp_iis_type) },
};
STATIC MP_DEFINE_CONST_DICT(IIS_module_globals,iis_module_globals_table);

const mp_obj_module_t mp_module_iis = {
	.base = { &mp_type_module },
	.globals = (mp_obj_dict_t *)&IIS_module_globals,
};

#endif

