
#include <stdio.h>

#include "esp_log.h"

#include "driver/gpio.h"
#include "driver/adc.h"

#include "py/runtime.h"
#include "py/mphal.h"
#include "modmachine.h"

#include <esp_types.h>
#include <stdlib.h>
#include <ctype.h>
#include "rom/ets_sys.h"

#include "soc/rtc_io_reg.h"
#include "soc/rtc_io_struct.h"
#include "soc/sens_reg.h"
//#include "soc/sens_struct.h"
#include "soc/rtc_cntl_reg.h"
#include "soc/rtc_cntl_struct.h"
#include "rtc_io.h"
#include "touch_pad.h"
#include "adc.h"
#include "dac.h"
#include "freertos/FreeRTOS.h"
#include "freertos/xtensa_api.h"
#include "freertos/semphr.h"
#include "freertos/timers.h"
#include "esp_intr_alloc.h"
#include "sys/lock.h"
//#include "driver/rtc_cntl.h"
#include "rom/queue.h"
#include "modmachine.h" 

static const char *RTC_MODULE_TAG = "RTC_MODULE";
//extern portMUX_TYPE rtc_spinlock;


//Keep this in sync with the portMUX_TYPE struct definition please.
/*
#ifndef CONFIG_FREERTOS_PORTMUX_DEBUG
#define portMUX_INITIALIZER_UNLOCKED {					\
		.owner = portMUX_FREE_VAL,						\
		.count = 0,										\
	}
#else
#define portMUX_INITIALIZER_UNLOCKED {					\
		.owner = portMUX_FREE_VAL,						\
		.count = 0,										\
		.lastLockedFn = "(never locked)",				\
		.lastLockedLine = -1							\
	}
#endif
*/


#define RTC_MODULE_CHECK(a, str, ret_val) if (!(a)) {                                \
    ESP_LOGE(RTC_MODULE_TAG,"%s:%d (%s):%s", __FILE__, __LINE__, __FUNCTION__, str); \
    return (ret_val);                                                              \
}

#define RTC_RES_CHECK(res, ret_val) if ( (a) != ESP_OK) {                           \
        ESP_LOGE(RTC_MODULE_TAG,"%s:%d (%s)", __FILE__, __LINE__, __FUNCTION__); \
        return (ret_val);                                                              \
}

#define ADC1_CHECK_FUNCTION_RET(fun_ret) if(fun_ret!=ESP_OK){\
    ESP_LOGE(RTC_MODULE_TAG,"%s:%d\n",__FUNCTION__,__LINE__);\
    return ESP_FAIL;\
}

#define ADC2_CHECK_FUNCTION_RET(fun_ret) if(fun_ret!=ESP_OK){\
     ESP_LOGE(RTC_MODULE_TAG,"%s:%d\n",__FUNCTION__,__LINE__);\
     return ESP_FAIL;\
}

typedef struct _madc_obj_t {
    mp_obj_base_t base;
    gpio_num_t gpio_id;
    adc1_channel_t adc1_id;
} madc_obj_t;

STATIC const madc_obj_t madc_obj[] = {
    {{&machine_adc_type}, GPIO_NUM_36, ADC1_CHANNEL_0},
    {{&machine_adc_type}, GPIO_NUM_37, ADC1_CHANNEL_1},
    {{&machine_adc_type}, GPIO_NUM_38, ADC1_CHANNEL_2},
    {{&machine_adc_type}, GPIO_NUM_39, ADC1_CHANNEL_3},
    {{&machine_adc_type}, GPIO_NUM_32, ADC1_CHANNEL_4},
    {{&machine_adc_type}, GPIO_NUM_33, ADC1_CHANNEL_5},
    {{&machine_adc_type}, GPIO_NUM_34, ADC1_CHANNEL_6},
    {{&machine_adc_type}, GPIO_NUM_35, ADC1_CHANNEL_7},
    {{&machine_adc_type}, GPIO_NUM_4, 0},
    {{&machine_adc_type}, GPIO_NUM_0, 1},
    {{&machine_adc_type}, GPIO_NUM_2, 2},
    {{&machine_adc_type}, GPIO_NUM_15, 3},
    {{&machine_adc_type}, GPIO_NUM_13, 4},
    {{&machine_adc_type}, GPIO_NUM_12, 5},
    {{&machine_adc_type}, GPIO_NUM_14, 6},
    {{&machine_adc_type}, GPIO_NUM_27, 7},
    {{&machine_adc_type}, GPIO_NUM_25, 8},
    {{&machine_adc_type}, GPIO_NUM_26, 9},

};
/************************************************************/
static esp_err_t rtc_gpio_output_enable(gpio_num_t gpio_num)
{
    int rtc_gpio_num = rtc_gpio_desc[gpio_num].rtc_num;
    RTC_MODULE_CHECK(rtc_gpio_num != -1, "RTC_GPIO number error", ESP_ERR_INVALID_ARG);
    SET_PERI_REG_MASK(RTC_GPIO_ENABLE_W1TS_REG, (1 << (rtc_gpio_num + RTC_GPIO_ENABLE_W1TS_S)));
    CLEAR_PERI_REG_MASK(RTC_GPIO_ENABLE_W1TC_REG, (1 << (rtc_gpio_num + RTC_GPIO_ENABLE_W1TC_S)));

    return ESP_OK;
}

static esp_err_t rtc_gpio_output_disable(gpio_num_t gpio_num)
{
    int rtc_gpio_num = rtc_gpio_desc[gpio_num].rtc_num;
    RTC_MODULE_CHECK(rtc_gpio_num != -1, "RTC_GPIO number error", ESP_ERR_INVALID_ARG);
    CLEAR_PERI_REG_MASK(RTC_GPIO_ENABLE_W1TS_REG, (1 << (rtc_gpio_num + RTC_GPIO_ENABLE_W1TS_S)));
    SET_PERI_REG_MASK(RTC_GPIO_ENABLE_W1TC_REG, (1 << ( rtc_gpio_num + RTC_GPIO_ENABLE_W1TC_S)));

    return ESP_OK;
}

static esp_err_t rtc_gpio_input_enable(gpio_num_t gpio_num)
{
    RTC_MODULE_CHECK(rtc_gpio_is_valid_gpio(gpio_num), "RTC_GPIO number error", ESP_ERR_INVALID_ARG);
   // portENTER_CRITICAL(&rtc_spinlock);
    SET_PERI_REG_MASK(rtc_gpio_desc[gpio_num].reg, rtc_gpio_desc[gpio_num].ie);
   // portEXIT_CRITICAL(&rtc_spinlock);

    return ESP_OK;
}

static esp_err_t rtc_gpio_input_disable(gpio_num_t gpio_num)
{
    RTC_MODULE_CHECK(rtc_gpio_is_valid_gpio(gpio_num), "RTC_GPIO number error", ESP_ERR_INVALID_ARG);
   // portENTER_CRITICAL(&rtc_spinlock);
    CLEAR_PERI_REG_MASK(rtc_gpio_desc[gpio_num].reg, rtc_gpio_desc[gpio_num].ie);
   // portEXIT_CRITICAL(&rtc_spinlock);

    return ESP_OK;
}
/*---------------------------------------------------------------
                    ADC2
                    {4, 0, 2, 15, 13, 12, 14, 27, 25, 26};
---------------------------------------------------------------*/
static esp_err_t adc2_pad_get_io_num(uint8_t channel, gpio_num_t *gpio_num)
{
    RTC_MODULE_CHECK(channel < 10, "ADC2 Channel Err", ESP_ERR_INVALID_ARG);

    switch (channel) {
    case 0:
        *gpio_num = 4;
        break;
    case 1:
        *gpio_num = 0;
        break;
    case 2:
        *gpio_num = 2;
        break;
    case 3:
        *gpio_num = 15;
        break;
    case 4:
        *gpio_num = 13;
        break;
    case 5:
        *gpio_num = 12;
        break;
    case 6:
        *gpio_num = 14;
        break;
    case 7:
        *gpio_num = 27;
        break;
    case 8:
            *gpio_num = 25;
            break;
    case 9:
            *gpio_num = 26;
            break;
    default:
        return ESP_ERR_INVALID_ARG;
    }

    return ESP_OK;
}

static esp_err_t adc2_pad_init(uint8_t channel)
{
	gpio_num_t gpio_num = 0;
	ADC2_CHECK_FUNCTION_RET(adc2_pad_get_io_num(channel, &gpio_num));
	ADC2_CHECK_FUNCTION_RET(rtc_gpio_init(gpio_num));

	REG_CLR_BIT(RTC_IO_TOUCH_PAD0_REG, RTC_IO_TOUCH_PAD0_TO_GPIO);
    REG_SET_BIT(RTC_IO_TOUCH_PAD0_REG, RTC_IO_TOUCH_PAD0_MUX_SEL);
    REG_CLR_BIT(RTC_IO_TOUCH_PAD0_REG, RTC_IO_TOUCH_PAD0_FUN_SEL);

    ADC2_CHECK_FUNCTION_RET(rtc_gpio_output_disable(gpio_num));
    ADC2_CHECK_FUNCTION_RET(rtc_gpio_input_disable(gpio_num));
    ADC2_CHECK_FUNCTION_RET(gpio_set_pull_mode(gpio_num, GPIO_FLOATING));

    return ESP_OK;
}

esp_err_t adc2_config_channel_atten(uint8_t channel, adc_atten_t atten)
{
	RTC_MODULE_CHECK(channel < 10, "ADC2 Channel Err", ESP_ERR_INVALID_ARG);
	RTC_MODULE_CHECK(atten <= ADC_ATTEN_11db, "ADC2 Atten Err", ESP_ERR_INVALID_ARG);
	adc2_pad_init(channel);
   // portENTER_CRITICAL(&rtc_spinlock); // adc_
    SET_PERI_REG_BITS(SENS_SAR_ATTEN2_REG, 3, atten, (channel * 2)); //SAR2_atten
   // portEXIT_CRITICAL(&rtc_spinlock); // adc_
    return ESP_OK;
}

esp_err_t adc2_config_width(adc_bits_width_t width_bit)
{
   // portENTER_CRITICAL(&rtc_spinlock); // adc_
    //SAR2_BIT_WIDTH[1:0]=0x3, SAR1_BIT_WIDTH[1:0]=0x3
    SET_PERI_REG_BITS(SENS_SAR_START_FORCE_REG, SENS_SAR2_BIT_WIDTH_V, width_bit, SENS_SAR2_BIT_WIDTH_S);
    //Invert the adc value,the Output value is invert
    SET_PERI_REG_MASK(SENS_SAR_READ_CTRL2_REG, SENS_SAR2_DATA_INV);
    //Set The adc sample width,invert adc value,must digital sar2_bit_width[1:0]=3
    SET_PERI_REG_BITS(SENS_SAR_READ_CTRL2_REG, SENS_SAR2_SAMPLE_BIT_V, width_bit, SENS_SAR2_SAMPLE_BIT_S);
   // portEXIT_CRITICAL(&rtc_spinlock); // adc_

    return ESP_OK;
}


int adc2_get_raw(uint8_t channel)
{
    uint16_t adc_value = 0;
   // portENTER_CRITICAL(&rtc_spinlock); // adc
    //Adc Controler is Rtc module,not ulp coprocessor
    SET_PERI_REG_BITS(SENS_SAR_MEAS_START2_REG, 1, 1, SENS_MEAS2_START_FORCE_S); //force pad mux and force start
    //Bit1=0:Fsm  Bit1=1(Bit0=0:PownDown Bit10=1:Powerup)
    SET_PERI_REG_BITS(SENS_SAR_MEAS_WAIT2_REG, SENS_FORCE_XPD_SAR, 0, SENS_FORCE_XPD_SAR_S); //force XPD_SAR=0, use XPD_FSM
    //Disable Amp Bit1=0:Fsm  Bit1=1(Bit0=0:PownDown Bit10=1:Powerup)
    SET_PERI_REG_BITS(SENS_SAR_MEAS_WAIT2_REG, SENS_FORCE_XPD_AMP, 0x2, SENS_FORCE_XPD_AMP_S); //force XPD_AMP=0
    //Open the ADC2 Data port Not ulp coprocessor
    SET_PERI_REG_BITS(SENS_SAR_MEAS_START2_REG, 1, 1, SENS_SAR2_EN_PAD_FORCE_S); //open the ADC2 data port
    //Select channel
    SET_PERI_REG_BITS(SENS_SAR_MEAS_START2_REG, SENS_SAR2_EN_PAD, (1 << channel), SENS_SAR2_EN_PAD_S); //pad enable
    //[11:8]:short ref ground, [7:4]:short ref, [3:0]:rst fb
    SET_PERI_REG_BITS(SENS_SAR_MEAS_CTRL_REG, 0xfff, 0x0, SENS_AMP_RST_FB_FSM_S);
    SET_PERI_REG_BITS(SENS_SAR_MEAS_WAIT1_REG, SENS_SAR_AMP_WAIT1, 0x1, SENS_SAR_AMP_WAIT1_S);
    SET_PERI_REG_BITS(SENS_SAR_MEAS_WAIT1_REG, SENS_SAR_AMP_WAIT2, 0x1, SENS_SAR_AMP_WAIT2_S);
    SET_PERI_REG_BITS(SENS_SAR_MEAS_WAIT2_REG, SENS_SAR_AMP_WAIT3, 0x1, SENS_SAR_AMP_WAIT3_S);
    while (GET_PERI_REG_BITS2(SENS_SAR_SLAVE_ADDR1_REG, 0x7, SENS_MEAS_STATUS_S) != 0); //wait det_fsm==0
    SET_PERI_REG_BITS(SENS_SAR_MEAS_START2_REG, 1, 0, SENS_MEAS2_START_SAR_S); //start force 0
    SET_PERI_REG_BITS(SENS_SAR_MEAS_START2_REG, 1, 1, SENS_MEAS2_START_SAR_S); //start force 1
    while (GET_PERI_REG_MASK(SENS_SAR_MEAS_START2_REG, SENS_MEAS2_DONE_SAR) == 0) {}; //read done
    adc_value = GET_PERI_REG_BITS2(SENS_SAR_MEAS_START2_REG, SENS_MEAS2_DATA_SAR, SENS_MEAS2_DATA_SAR_S);
    //portEXIT_CRITICAL(&rtc_spinlock); // adc_

    return adc_value;
}

int adc2_get_voltage(uint8_t channel)    //Deprecated. Use adc1_get_raw() instead
{
    return adc2_get_raw(channel);
}

/************************************************************/
uint8_t check_adc_pin_num(gpio_num_t pin_id)
{
    if(pin_id==36||pin_id==37||pin_id==38||pin_id==39||pin_id==32||pin_id==33||pin_id==34||pin_id==35) 
	return 1;
    if(pin_id==4||pin_id==0||pin_id==2||pin_id==15||pin_id==13||pin_id==12||pin_id==14||pin_id==27||pin_id==25||pin_id==26)
        return 2;
    return 0;
}

STATIC mp_obj_t madc_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw,const mp_obj_t *args) {

    uint8_t ret=0;

    static int initialized1 = 0;
    static int initialized2 = 0;
    gpio_num_t pin_id = machine_pin_get_id(args[0]);
    ret=check_adc_pin_num(pin_id);
    if (!initialized1&&ret==1) {
        adc1_config_width(ADC_WIDTH_12Bit);
        initialized1 = 1;
    }
    if (!initialized2&&ret==2) 
    {
        adc2_config_width(ADC_WIDTH_12Bit);
        initialized2 = 1;
    }
    mp_arg_check_num(n_args, n_kw, 1, 1, true);

    const madc_obj_t *self = NULL;
    for (int i = 0; i < MP_ARRAY_SIZE(madc_obj); i++) {
        if (pin_id == madc_obj[i].gpio_id) { self = &madc_obj[i]; break; }
    }
    if (!self) nlr_raise(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid Pin for ADC"));
    esp_err_t err=0;
    if(ret==1)
        {err = adc1_config_channel_atten(self->adc1_id,ADC_ATTEN_11db);}
    else if(ret==2)
        {err = adc2_config_channel_atten(self->adc1_id,ADC_ATTEN_11db);}
    
    if (err == ESP_OK) return MP_OBJ_FROM_PTR(self);
    mp_raise_ValueError("Parameter Error");
}

STATIC void madc_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    madc_obj_t *self = self_in;
    mp_printf(print, "ADC(Pin(%u))", self->gpio_id);
}

STATIC mp_obj_t madc_read(mp_obj_t self_in) {
    madc_obj_t *self = self_in;
    int val=0;
    if(check_adc_pin_num(self->gpio_id)==1)
    {
        val = adc1_get_voltage(self->adc1_id);
    }else if(check_adc_pin_num(self->gpio_id)==2)
    {
        val = adc2_get_raw(self->adc1_id);
    }
    
    if (val == -1) mp_raise_ValueError("Parameter Error");
    return MP_OBJ_NEW_SMALL_INT(val);
}
MP_DEFINE_CONST_FUN_OBJ_1(madc_read_obj, madc_read);

STATIC mp_obj_t madc_atten(mp_obj_t self_in, mp_obj_t atten_in) {
    madc_obj_t *self = self_in;
    esp_err_t err=0;
    adc_atten_t atten = mp_obj_get_int(atten_in);
    if(check_adc_pin_num(self->gpio_id)==1)
    {
        err = adc1_config_channel_atten(self->adc1_id, atten);
    }else if(check_adc_pin_num(self->gpio_id)==2)
    {
        err = adc2_config_channel_atten(self->adc1_id, atten);
    }
    
    if (err == ESP_OK) return mp_const_none;
    mp_raise_ValueError("Parameter Error");
}
MP_DEFINE_CONST_FUN_OBJ_2(madc_atten_obj, madc_atten);

STATIC mp_obj_t madc_width(mp_obj_t cls_in, mp_obj_t width_in) {
    madc_obj_t *self = cls_in;
    adc_bits_width_t width = mp_obj_get_int(width_in);
    esp_err_t err=0;
    if(check_adc_pin_num(self->gpio_id)==1)
    {
        err = adc1_config_width(width);
    }else if(check_adc_pin_num(self->gpio_id)==2)
    {
        err = adc2_config_width(width);
    }
   
    if (err == ESP_OK) return mp_const_none;
    mp_raise_ValueError("Parameter Error");
}
MP_DEFINE_CONST_FUN_OBJ_2(madc_width_fun_obj, madc_width);
MP_DEFINE_CONST_CLASSMETHOD_OBJ(madc_width_obj, MP_ROM_PTR(&madc_width_fun_obj));

STATIC const mp_rom_map_elem_t madc_locals_dict_table[] = {
    { MP_ROM_QSTR(MP_QSTR_read), MP_ROM_PTR(&madc_read_obj) },
    { MP_ROM_QSTR(MP_QSTR_atten), MP_ROM_PTR(&madc_atten_obj) },
    { MP_ROM_QSTR(MP_QSTR_width), MP_ROM_PTR(&madc_width_obj) },

    { MP_ROM_QSTR(MP_QSTR_ATTN_0DB), MP_ROM_INT(ADC_ATTEN_0db) },
    { MP_ROM_QSTR(MP_QSTR_ATTN_2_5DB), MP_ROM_INT(ADC_ATTEN_2_5db) },
    { MP_ROM_QSTR(MP_QSTR_ATTN_6DB), MP_ROM_INT(ADC_ATTEN_6db) },
    { MP_ROM_QSTR(MP_QSTR_ATTN_11DB), MP_ROM_INT(ADC_ATTEN_11db) },

    { MP_ROM_QSTR(MP_QSTR_WIDTH_9BIT), MP_ROM_INT(ADC_WIDTH_9Bit) },
    { MP_ROM_QSTR(MP_QSTR_WIDTH_10BIT), MP_ROM_INT(ADC_WIDTH_10Bit) },
    { MP_ROM_QSTR(MP_QSTR_WIDTH_11BIT), MP_ROM_INT(ADC_WIDTH_11Bit) },
    { MP_ROM_QSTR(MP_QSTR_WIDTH_12BIT), MP_ROM_INT(ADC_WIDTH_12Bit) },
};

STATIC MP_DEFINE_CONST_DICT(madc_locals_dict, madc_locals_dict_table);

const mp_obj_type_t machine_adc_type = {
    { &mp_type_type },
    .name = MP_QSTR_ADC,
    .print = madc_print,
    .make_new = madc_make_new,
    .locals_dict = (mp_obj_t)&madc_locals_dict,
};
